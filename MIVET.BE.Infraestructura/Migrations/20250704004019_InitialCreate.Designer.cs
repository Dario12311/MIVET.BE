// <auto-generated />
using System;
using MIVET.BE.Infraestructura.Persintence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MIVET.BE.Infraestructura.Migrations
{
    [DbContext(typeof(MIVETDbContext))]
    [Migration("20250704004019_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MIVET.BE.Transversales.Core.Dias", b =>
                {
                    b.Property<int>("DiaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiaID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Nombre");

                    b.HasKey("DiaID");

                    b.ToTable("Dias", (string)null);

                    b.HasData(
                        new
                        {
                            DiaID = 1,
                            Code = "LUNES"
                        },
                        new
                        {
                            DiaID = 2,
                            Code = "MARTES"
                        },
                        new
                        {
                            DiaID = 3,
                            Code = "MIÉRCOLES"
                        },
                        new
                        {
                            DiaID = 4,
                            Code = "JUEVES"
                        },
                        new
                        {
                            DiaID = 5,
                            Code = "VIERNES"
                        },
                        new
                        {
                            DiaID = 6,
                            Code = "SÁBADO"
                        },
                        new
                        {
                            DiaID = 7,
                            Code = "DOMINGO"
                        });
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Core.EstadoCita", b =>
                {
                    b.Property<int>("EstadoCitaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoCitaID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Code");

                    b.HasKey("EstadoCitaID");

                    b.ToTable("EstadoCita", (string)null);

                    b.HasData(
                        new
                        {
                            EstadoCitaID = 1,
                            Code = "PENDIENTE"
                        },
                        new
                        {
                            EstadoCitaID = 3,
                            Code = "EN CURSO"
                        },
                        new
                        {
                            EstadoCitaID = 2,
                            Code = "COMPLETADA"
                        },
                        new
                        {
                            EstadoCitaID = 4,
                            Code = "CANCELADA"
                        },
                        new
                        {
                            EstadoCitaID = 5,
                            Code = "NO ASISTIO"
                        });
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Core.HorasMedicas", b =>
                {
                    b.Property<int>("HoraMedicaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HoraMedicaID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("HoraMedicaID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("HorasMedicas", "dbo");

                    b.HasData(
                        new
                        {
                            HoraMedicaID = 1,
                            Code = "6:00 AM"
                        },
                        new
                        {
                            HoraMedicaID = 2,
                            Code = "6:30 AM"
                        },
                        new
                        {
                            HoraMedicaID = 3,
                            Code = "7:00 AM"
                        },
                        new
                        {
                            HoraMedicaID = 4,
                            Code = "7:30 AM"
                        },
                        new
                        {
                            HoraMedicaID = 5,
                            Code = "8:00 AM"
                        },
                        new
                        {
                            HoraMedicaID = 6,
                            Code = "8:30 AM"
                        },
                        new
                        {
                            HoraMedicaID = 7,
                            Code = "9:00 AM"
                        },
                        new
                        {
                            HoraMedicaID = 8,
                            Code = "9:30 AM"
                        },
                        new
                        {
                            HoraMedicaID = 9,
                            Code = "10:00 AM"
                        },
                        new
                        {
                            HoraMedicaID = 10,
                            Code = "10:30 AM"
                        },
                        new
                        {
                            HoraMedicaID = 11,
                            Code = "11:00 AM"
                        },
                        new
                        {
                            HoraMedicaID = 12,
                            Code = "11:30 AM"
                        },
                        new
                        {
                            HoraMedicaID = 13,
                            Code = "12:00 PM"
                        },
                        new
                        {
                            HoraMedicaID = 14,
                            Code = "12:30 PM"
                        },
                        new
                        {
                            HoraMedicaID = 15,
                            Code = "1:00 PM"
                        },
                        new
                        {
                            HoraMedicaID = 16,
                            Code = "1:30 PM"
                        },
                        new
                        {
                            HoraMedicaID = 17,
                            Code = "2:00 PM"
                        },
                        new
                        {
                            HoraMedicaID = 18,
                            Code = "2:30 PM"
                        },
                        new
                        {
                            HoraMedicaID = 19,
                            Code = "3:00 PM"
                        },
                        new
                        {
                            HoraMedicaID = 20,
                            Code = "3:30 PM"
                        },
                        new
                        {
                            HoraMedicaID = 21,
                            Code = "4:00 PM"
                        },
                        new
                        {
                            HoraMedicaID = 22,
                            Code = "4:30 PM"
                        },
                        new
                        {
                            HoraMedicaID = 23,
                            Code = "5:00 PM"
                        },
                        new
                        {
                            HoraMedicaID = 24,
                            Code = "5:30 PM"
                        },
                        new
                        {
                            HoraMedicaID = 25,
                            Code = "6:00 PM"
                        });
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Core.LugarConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LugarConsulta", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CONSULTORIO 1 PRIMER PISO"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CONSULTORIO 2 PRIMER PISO"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CONSULTORIO 3 SEGUNDO PISO"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CONSULTORIO 4 SEGUNDO PISO"
                        });
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Core.TipoConsulta", b =>
                {
                    b.Property<int>("TipoConsultaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoConsultaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoConsultaID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Code");

                    b.HasKey("TipoConsultaID");

                    b.ToTable("TipoConsulta", "dbo");

                    b.HasData(
                        new
                        {
                            TipoConsultaID = 1,
                            Code = "General"
                        },
                        new
                        {
                            TipoConsultaID = 2,
                            Code = "Especializada"
                        },
                        new
                        {
                            TipoConsultaID = 3,
                            Code = "Seguimiento"
                        },
                        new
                        {
                            TipoConsultaID = 4,
                            Code = "Emergencia"
                        });
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DuracionMinutos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<int>("EstadoCita")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCancelacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaFinPeriodo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<int>("MascotaId")
                        .HasColumnType("int");

                    b.Property<string>("MedicoVeterinarioNumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MotivoCancelacion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MotivoConsulta")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TipoCita")
                        .HasColumnType("int");

                    b.Property<int>("TipoUsuarioCreador")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoCita");

                    b.HasIndex("FechaCita");

                    b.HasIndex("MascotaId");

                    b.HasIndex("MedicoVeterinarioNumeroDocumento");

                    b.HasIndex("FechaCita", "HoraInicio", "HoraFin");

                    b.HasIndex("MedicoVeterinarioNumeroDocumento", "FechaCita", "HoraInicio");

                    b.ToTable("Citas", null, t =>
                        {
                            t.HasCheckConstraint("CK_Cita_DuracionMinutos", "DuracionMinutos >= 15 AND DuracionMinutos <= 480 AND DuracionMinutos % 15 = 0");

                            t.HasCheckConstraint("CK_Cita_HorarioValido", "HoraInicio < HoraFin");
                        });
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Consultas", b =>
                {
                    b.Property<int>("CitaMedicaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitaMedicaID"));

                    b.Property<int>("DiaID")
                        .HasColumnType("int");

                    b.Property<int>("EstadoCitaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorasMedicasID")
                        .HasColumnType("int");

                    b.Property<int>("LugarConsultaID")
                        .HasColumnType("int");

                    b.Property<string>("MedicoID")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MotivoConsulta")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PacienteID")
                        .HasColumnType("int");

                    b.Property<int>("TipoConsultaID")
                        .HasColumnType("int");

                    b.HasKey("CitaMedicaID");

                    b.HasIndex("DiaID");

                    b.HasIndex("EstadoCitaID");

                    b.HasIndex("HorasMedicasID");

                    b.HasIndex("LugarConsultaID");

                    b.HasIndex("MedicoID");

                    b.HasIndex("PacienteID");

                    b.HasIndex("TipoConsultaID");

                    b.ToTable("Consultas", (string)null);
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Country.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.DetalleFactura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionItem")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("DescuentoPorcentaje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("FacturaId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ProcedimientoMedicoId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TipoItem")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId");

                    b.HasIndex("ProcedimientoMedicoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TipoItem");

                    b.ToTable("DetalleFactura", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_DetalleFactura_Cantidad", "Cantidad > 0");

                            t.HasCheckConstraint("CK_DetalleFactura_DescuentoPorcentaje", "DescuentoPorcentaje >= 0 AND DescuentoPorcentaje <= 100");

                            t.HasCheckConstraint("CK_DetalleFactura_PrecioUnitario", "PrecioUnitario >= 0");
                        });
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("DescuentoPorcentaje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(12,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DescuentoValor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(12,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("FechaFactura")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("MascotaId")
                        .HasColumnType("int");

                    b.Property<string>("MedicoVeterinarioNumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MetodoPago")
                        .HasColumnType("int");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NumeroDocumentoCliente")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("CitaId")
                        .IsUnique();

                    b.HasIndex("Estado");

                    b.HasIndex("FechaFactura");

                    b.HasIndex("MascotaId");

                    b.HasIndex("MedicoVeterinarioNumeroDocumento");

                    b.HasIndex("NumeroDocumentoCliente");

                    b.HasIndex("NumeroFactura")
                        .IsUnique();

                    b.ToTable("Factura", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.HistoriaClinicaMascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Diagnostico");

                    b.Property<int>("Edad")
                        .HasColumnType("int")
                        .HasColumnName("Edad");

                    b.Property<string>("EspecialidadVeterinario")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("EspecialidadVeterinario");

                    b.Property<DateTime>("FechaConsulta")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaConsulta");

                    b.Property<int>("IdMascota")
                        .HasColumnType("int")
                        .HasColumnName("IdMascota");

                    b.Property<string>("MotivoConsulta")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("MotivoConsulta");

                    b.Property<string>("NombreMascota")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NombreMascota");

                    b.Property<string>("NombrePropietario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NombrePropietario");

                    b.Property<string>("NombreVeterinario")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("NombreVeterinario");

                    b.Property<string>("NumeroDocumentoPropietario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NumeroDocumentoPropietario");

                    b.Property<string>("NumeroDocumentoVeterinario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NumeroDocumentoVeterinario");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Observaciones");

                    b.Property<string>("Raza")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Raza");

                    b.Property<string>("Tratamiento")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Tratamiento");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdMascota");

                    b.HasIndex("NumeroDocumentoPropietario");

                    b.HasIndex("NumeroDocumentoVeterinario");

                    b.ToTable("HistoriaClinicaMascota", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.HistorialClinico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("ExamenFisico")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime");

                    b.Property<int>("MascotaId")
                        .HasColumnType("int");

                    b.Property<string>("Medicamentos")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MedicoVeterinarioNumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModificadoPor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MotivoConsulta")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Peso")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProcedimientosRealizados")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ProximaCita")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecomendacionesGenerales")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SignosVitales")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Sintomas")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Temperatura")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Tratamiento")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("CitaId")
                        .IsUnique();

                    b.HasIndex("Estado");

                    b.HasIndex("FechaRegistro");

                    b.HasIndex("MascotaId");

                    b.HasIndex("MedicoVeterinarioNumeroDocumento");

                    b.ToTable("HistorialClinico", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.HorarioVeterinario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiaSemana")
                        .HasColumnType("int");

                    b.Property<bool>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("MedicoVeterinarioNumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EsActivo");

                    b.HasIndex("MedicoVeterinarioNumeroDocumento");

                    b.HasIndex("MedicoVeterinarioNumeroDocumento", "DiaSemana");

                    b.ToTable("HorarioVeterinarios", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.MaritalStatus.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Mascota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Edad")
                        .HasColumnType("int")
                        .HasColumnName("Edad");

                    b.Property<string>("Especie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Especie");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Estado");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Genero");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nombre");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NumeroDocumentoCliente");

                    b.Property<string>("Raza")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Raza");

                    b.HasKey("Id");

                    b.HasIndex("NumeroDocumento");

                    b.ToTable("Mascota", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.MedicoVeterinario", b =>
                {
                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NumeroDocumento");

                    b.Property<DateTime>("AñoGraduacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("AñoGraduacion");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CorreoElectronico");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Direccion");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Especialidad");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Estado");

                    b.Property<int>("EstadoCivil")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaRegistro");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Nombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Telefono");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int");

                    b.Property<string>("UniversidadGraduacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("UniversidadGraduacion");

                    b.Property<string>("ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ciudad");

                    b.Property<string>("genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("genero");

                    b.Property<string>("nacionalidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nacionalidad");

                    b.HasKey("NumeroDocumento");

                    b.HasIndex("EstadoCivil");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("MedicoVeterinario", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.PersonaCliente", b =>
                {
                    b.Property<string>("NumeroDocumento")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("NumeroDocumento");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Celular");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Ciudad");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CodigoPostal");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CorreoElectronico");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Departamento");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Direccion");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Estado");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EstadoCivil");

                    b.Property<string>("FechaNacimiento")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("FechaNacimiento");

                    b.Property<DateTime>("FechaRegistro")
                        .HasMaxLength(10)
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaRegistro");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Genero");

                    b.Property<int>("IdTipoDocumento")
                        .HasColumnType("int")
                        .HasColumnName("TipoDocumento");

                    b.Property<string>("LugarNacimiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LugarNacimiento");

                    b.Property<string>("Nacionalidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Nacionalidad");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Pais");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PrimerApellido");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PrimerNombre");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SegundoApellido");

                    b.Property<string>("SegundoNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SegundoNombre");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Telefono");

                    b.HasKey("NumeroDocumento");

                    b.HasIndex("IdTipoDocumento");

                    b.ToTable("PersonaCliente", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.ProcedimientoMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreadoPor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EsActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificadoPor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Categoria");

                    b.HasIndex("EsActivo");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("ProcedimientoMedico", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TipoDocumento", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Productos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Productos", (string)null);
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Rol", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Usuarios", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioID"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Estado");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Identificacion");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NombreUsuario");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Password");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("RolId");

                    b.HasKey("UsuarioID");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios", "dbo");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Cita", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Entidades.Mascota", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.MedicoVeterinario", "MedicoVeterinario")
                        .WithMany()
                        .HasForeignKey("MedicoVeterinarioNumeroDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mascota");

                    b.Navigation("MedicoVeterinario");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Consultas", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Core.Dias", null)
                        .WithMany()
                        .HasForeignKey("DiaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Core.EstadoCita", null)
                        .WithMany()
                        .HasForeignKey("EstadoCitaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Core.HorasMedicas", null)
                        .WithMany()
                        .HasForeignKey("HorasMedicasID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Core.LugarConsulta", null)
                        .WithMany()
                        .HasForeignKey("LugarConsultaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.MedicoVeterinario", null)
                        .WithMany()
                        .HasForeignKey("MedicoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.Mascota", null)
                        .WithMany()
                        .HasForeignKey("PacienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Core.TipoConsulta", null)
                        .WithMany()
                        .HasForeignKey("TipoConsultaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.DetalleFactura", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Entidades.Factura", "Factura")
                        .WithMany("DetallesFactura")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.ProcedimientoMedico", "ProcedimientoMedico")
                        .WithMany()
                        .HasForeignKey("ProcedimientoMedicoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MIVET.BE.Transversales.Productos", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Factura");

                    b.Navigation("ProcedimientoMedico");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Factura", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Entidades.Cita", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.Mascota", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.MedicoVeterinario", "MedicoVeterinario")
                        .WithMany()
                        .HasForeignKey("MedicoVeterinarioNumeroDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.PersonaCliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("NumeroDocumentoCliente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Cliente");

                    b.Navigation("Mascota");

                    b.Navigation("MedicoVeterinario");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.HistoriaClinicaMascota", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Entidades.Mascota", null)
                        .WithMany()
                        .HasForeignKey("IdMascota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.PersonaCliente", null)
                        .WithMany()
                        .HasForeignKey("NumeroDocumentoPropietario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.MedicoVeterinario", null)
                        .WithMany()
                        .HasForeignKey("NumeroDocumentoVeterinario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.HistorialClinico", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Entidades.Cita", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.Mascota", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.MedicoVeterinario", "MedicoVeterinario")
                        .WithMany()
                        .HasForeignKey("MedicoVeterinarioNumeroDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Mascota");

                    b.Navigation("MedicoVeterinario");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.HorarioVeterinario", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Entidades.MedicoVeterinario", "MedicoVeterinario")
                        .WithMany()
                        .HasForeignKey("MedicoVeterinarioNumeroDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicoVeterinario");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Mascota", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Entidades.PersonaCliente", "PersonaCliente")
                        .WithMany()
                        .HasForeignKey("NumeroDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonaCliente");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.MedicoVeterinario", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Entidades.MaritalStatus.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("EstadoCivil")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MIVET.BE.Transversales.Entidades.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaritalStatus");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.PersonaCliente", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Entidades.TipoDocumento", null)
                        .WithMany()
                        .HasForeignKey("IdTipoDocumento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Usuarios", b =>
                {
                    b.HasOne("MIVET.BE.Transversales.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MIVET.BE.Transversales.Entidades.Factura", b =>
                {
                    b.Navigation("DetallesFactura");
                });
#pragma warning restore 612, 618
        }
    }
}
